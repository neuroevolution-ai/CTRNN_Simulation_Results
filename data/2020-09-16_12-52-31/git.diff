diff --git a/configurations/cnn_ctrnn.json b/configurations/cnn_ctrnn.json
index 388a473..4c996a8 100644
--- a/configurations/cnn_ctrnn.json
+++ b/configurations/cnn_ctrnn.json
@@ -1,17 +1,17 @@
 {
   "environment": "QbertHard-v0",
   "random_seed": -1,
-  "number_generations": 5,
+  "number_generations": 330,
   "use_worker_processes": true,
   "optimizer": {
     "type": "MU_ES",
-    "hof_size": 10,
-    "checkpoint_frequency": 10,
+    "hof_size": 20,
+    "checkpoint_frequency": 1,
     "initial_gene_range": 2,
     "tournsize": 0,
-    "mu": 100,
+    "mu": 50,
     "extra_from_hof": 1,
-    "lambda_": 1000,
+    "lambda_": 100,
     "mutpb": 0.8,
     "efficiency_weight": 0.0,
     "fix_seed_for_generation": true,
@@ -60,17 +60,17 @@
     }
   },
   "novelty": {
-    "behavioral_interval": 100,
-    "behavioral_max_length": 20,
-    "behavior_source": "brain",
-    "distance": "euclid",
-    "max_recorded_behaviors": 100,
-    "recorded_behaviors_per_generation": 2,
-    "novelty_nearest_k": 5,
-    "novelty_weight": 0.7
+    "behavioral_interval": 1,
+    "behavioral_max_length": 1,
+    "behavior_source": "state",
+    "distance": "NCD",
+    "max_recorded_behaviors": 1,
+    "recorded_behaviors_per_generation": 1,
+    "novelty_nearest_k": 1,
+    "novelty_weight": 0.0
   },
   "episode_runner": {
-    "number_fitness_runs": 1,
+    "number_fitness_runs": 5,
     "reuse_env": true,
     "max_steps_per_run": 0,
     "max_steps_penalty": 0,
diff --git a/neuro_evolution_ctrnn/render_hof.py b/neuro_evolution_ctrnn/render_hof.py
index c15ce33..229845e 100755
--- a/neuro_evolution_ctrnn/render_hof.py
+++ b/neuro_evolution_ctrnn/render_hof.py
@@ -27,9 +27,12 @@ class RenderArgs(Tap):
 
 args = RenderArgs().parse_args()
 logging.basicConfig(format="%(levelname)s: %(message)s", level=logging.INFO)
-
-with open(os.path.join(args.dir, "Log.pkl"), "rb") as read_file_log:
-    log = pickle.load(read_file_log)
+try:
+    with open(os.path.join(args.dir, "Log.pkl"), "rb") as read_file_log:
+        log = pickle.load(read_file_log)
+except:
+    with open(os.path.join(args.dir, "Log.json"), "r") as read_file_log:
+        log = config_from_dict(json.load(read_file_log))
 with open(os.path.join(args.dir, "Configuration.json"), "r") as read_file:
     config = config_from_dict( json.load(read_file))
 
